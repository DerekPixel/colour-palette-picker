{"version":3,"sources":["components/ColourValueText.jsx","components/Colours.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ColourValueText","className","colour","defaultText","colourTooltip","useRef","changeText","ref","text","current","textContent","onMouseOut","onClick","navigator","clipboard","writeText","toUpperCase","Colours","setColourArray","setColour","hexToRGB","r","g","b","hex","String","length","parseInt","getLightnessFromHex","arr","split","cmin","Math","min","cmax","max","delta","h","s","l","round","abs","toFixed","rgbToHSL","coloursDiv","map","colourObj","i","style","backgroundColor","color","pos","coloursArrayCopy","slice","splice","removeColour","type","value","onChange","e","target","handleChangeColour","App","useState","makeColourObject","coloursArray","randomColourInHex","newColour","colourHex","floor","random","push","addNewColourToColoursArray","href","coloursObject","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52df712c.chunk.js","sourcesContent":["import { useRef } from 'react';\r\n\r\nconst ColourValueText = ({className, colour, defaultText}) => {\r\n\r\n  const colourTooltip = useRef(null);\r\n\r\n  function clipboard(colour) {\r\n    navigator.clipboard.writeText(colour);\r\n  }\r\n\r\n  function changeText(ref, text) {\r\n    ref.current.textContent = text;\r\n  }\r\n\r\n  return (\r\n    <p\r\n      className={className}\r\n      onMouseOut={() => {\r\n        changeText(colourTooltip, defaultText);\r\n      }}\r\n      onClick={() => {\r\n        clipboard(colour);\r\n        changeText(colourTooltip, `COPIED: ${colour}`);\r\n      }}\r\n    >\r\n      <span className='tooltiptext' ref={colourTooltip} >{defaultText}</span>\r\n      {colour.toUpperCase()}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default ColourValueText\r\n","import ColourValueText from './ColourValueText';\r\n\r\nconst Colours = ({colour, setColour: setColourArray}) => {\r\n\r\n  function handleChangeColour(e, pos) {\r\n    var coloursArrayCopy = colour.slice();\r\n\r\n    coloursArrayCopy[pos].colour = e.target.value;\r\n    \r\n    setColourArray(coloursArrayCopy);\r\n  }\r\n\r\n  function removeColour(pos) {\r\n    var coloursArrayCopy = colour.slice();\r\n\r\n    //escape if there is only one colour left in the colours Array\r\n    if(coloursArrayCopy.length === 1) {\r\n      return;\r\n    }\r\n\r\n    //Remove colour from array\r\n    coloursArrayCopy.splice(pos, 1);\r\n\r\n    //make sure each colour has correct position property\r\n    for(var i = 0; i < coloursArrayCopy.length; i++) {\r\n      coloursArrayCopy[i].pos = i;\r\n    }\r\n\r\n    setColourArray(coloursArrayCopy);\r\n  }\r\n  \r\n  function hexToRGB(hex = String) {\r\n\r\n    var r, g, b, rgb;\r\n    r = g = b = '00';\r\n\r\n    if(hex.length === 4) {\r\n      r = '0x' + hex[1] + hex[1];\r\n      g = '0x' + hex[2] + hex[2];\r\n      b = '0x' + hex[3] + hex[3];\r\n    }\r\n\r\n    if(hex.length === 7) {\r\n      r = '0x' + hex[1] + hex[2];\r\n      g = '0x' + hex[3] + hex[4];\r\n      b = '0x' + hex[5] + hex[6];\r\n    }\r\n\r\n    rgb = `${parseInt(r, 16)} ${parseInt(g, 16)} ${parseInt(b, 16)}`;\r\n\r\n    return rgb;\r\n  }\r\n\r\n  function rgbToHSL(rgb = String) {\r\n\r\n    var arr = rgb.split(' ');\r\n    var r = arr[0];\r\n    var g = arr[1];\r\n    var b = arr[2];\r\n\r\n    // Make r, g and b fractionsof 1\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n\r\n    // Find the greatest and smallest channel values\r\n    var cmin = Math.min(r, g, b),\r\n        cmax = Math.max(r, g, b),\r\n        delta = cmax - cmin,\r\n        h = 0,\r\n        s = 0,\r\n        l = 0;\r\n\r\n    // Calculate hue\r\n    // No difference\r\n    if(delta === 0) {\r\n      h = 0;\r\n    } else if(cmax === r) {       // Red is max\r\n      h = ((g - b) / delta) % 6;\r\n    } else if(cmax === g) {       // Green is max\r\n      h = (b - r) / delta + 2;\r\n    } else {                      // Blue is max\r\n      h = (r - g) / delta + 4;\r\n    }\r\n\r\n    h = Math.round(h * 60);\r\n\r\n    // Make negative hues positive behind 360degrees\r\n    if(h < 0) {\r\n      h += 360;\r\n    }\r\n\r\n    // Calculate lightness\r\n    l = (cmax + cmin) / 2;\r\n\r\n    // Calculate saturation\r\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * 1 -1));\r\n\r\n    // Multiply l and s by 100\r\n    s = +(s * 100).toFixed(1);\r\n    l = +(l * 100).toFixed(1);\r\n\r\n    return `${h} ${s} ${l}`;\r\n\r\n  }\r\n\r\n  function getLightnessFromHex(colour) {\r\n\r\n    var hsl = rgbToHSL(hexToRGB(colour));\r\n    var arr = hsl.split(' ');\r\n\r\n    return arr[2];\r\n  }\r\n\r\n  var coloursDiv = colour.map((colourObj, i) => {\r\n    \r\n\r\n    return (\r\n    <div\r\n      className='colour-column'\r\n      style={{\r\n        backgroundColor: `${colourObj.colour}`,\r\n        color: getLightnessFromHex(colourObj.colour) > 50 ? 'black' : 'white'\r\n      }}\r\n      key={colourObj.pos}\r\n    >\r\n\r\n      <button \r\n        className='\r\n          colour-column-item \r\n          clickable \r\n          btn-delete\r\n        ' \r\n        onClick={() => removeColour(colourObj.pos)} \r\n      >\r\n        X\r\n      </button>\r\n\r\n      <input \r\n        className='\r\n          colour-column-item\r\n          clickable \r\n          colour-column-item-input\r\n        ' \r\n        type=\"color\" value={colourObj.colour} \r\n        onChange={(e) => {handleChangeColour(e, colourObj.pos)}} \r\n      />\r\n\r\n      <ColourValueText \r\n        className='\r\n          colour-column-item \r\n          clickable \r\n          tooltip\r\n          hex-text\r\n        ' \r\n        colour={colourObj.colour}\r\n        defaultText='COPY HEX'\r\n      />\r\n\r\n      < ColourValueText \r\n        className='\r\n          colour-column-item \r\n          clickable \r\n          tooltip\r\n          rgb-text\r\n        ' \r\n\r\n        colour={hexToRGB(colourObj.colour)}\r\n        defaultText='COPY RGB'\r\n      />\r\n\r\n    </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className='colours'>\r\n      {coloursDiv}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Colours\r\n","import './App.css';\nimport { useState } from 'react';\nimport Colours from './components/Colours';\n\nfunction App() {\n\n\n  const [coloursArray, setColourArray] = useState(() => makeColoursArray());\n\n  function makeColoursArray() {\n    return [makeColourObject(0)];\n  }\n\n  function addNewColourToColoursArray() {\n    var coloursArrayCopy = coloursArray.slice();\n\n    if(coloursArrayCopy.length >= 7) {\n      return;\n    }\n\n    var newColour = makeColourObject(coloursArrayCopy.length);\n\n    coloursArrayCopy.push(newColour);\n\n    setColourArray(coloursArrayCopy);\n\n  }\n\n  function makeColourObject(pos) {\n    var newColour = {\n      colour: randomColourInHex(),\n      pos: pos\n    };\n    return newColour;\n  }\n\n  function randomColourInHex() {\n    var newColour = '#';\n    const colourHex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n    \n    for(var i = 0; i < 6; i++) {\n      newColour += colourHex[Math.floor(Math.random() * colourHex.length)];\n    }\n    return newColour;\n  }\n\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Colour Palette Picker</h1>\n        <button onClick={() => addNewColourToColoursArray()} >new colour</button>\n\n        <div className=\"creds-div\">\n          <p className=\"cred\">Made by Derek Price</p>\n          <a className=\"cred\" href=\"https://github.com/DerekPixel/colour-palette-picker\">GitHub</a>\n        </div>\n      </header>\n      <Colours colour={coloursArray} setColour={(coloursObject) => {setColourArray(coloursObject)}} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}