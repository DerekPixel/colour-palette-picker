{"version":3,"sources":["components/Colours.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Colours","colour","setColourArray","setColour","hexToRGB","r","g","b","hex","String","length","parseInt","clipboard","navigator","writeText","coloursDiv","map","colourObj","i","className","style","backgroundColor","onClick","pos","coloursArrayCopy","slice","splice","removeColour","type","value","onChange","e","target","handleChangeColour","toUpperCase","App","useState","makeColourObject","coloursArray","randomColourInHex","newColour","colourHex","Math","floor","random","push","addNewColourToColoursArray","href","coloursObject","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75b0c9b4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Colours = ({colour, setColour: setColourArray}) => {\r\n\r\n  function handleChangeColour(e, pos) {\r\n    var coloursArrayCopy = colour.slice();\r\n\r\n    coloursArrayCopy[pos].colour = e.target.value;\r\n    \r\n    setColourArray(coloursArrayCopy);\r\n  }\r\n\r\n  function removeColour(pos) {\r\n    var coloursArrayCopy = colour.slice();\r\n\r\n    //escape if there is only one colour left in the colours Array\r\n    if(coloursArrayCopy.length === 1) {\r\n      return;\r\n    }\r\n\r\n    //Remove colour from array\r\n    coloursArrayCopy.splice(pos, 1);\r\n\r\n    //make sure each colour has correct position property\r\n    for(var i = 0; i < coloursArrayCopy.length; i++) {\r\n      coloursArrayCopy[i].pos = i;\r\n    }\r\n\r\n    setColourArray(coloursArrayCopy);\r\n  }\r\n  \r\n  function hexToRGB(hex = String) {\r\n\r\n    var r, g, b, rgb;\r\n    r = g = b = '00';\r\n\r\n    if(hex.length === 4) {\r\n      r = '0x' + hex[1] + hex[1];\r\n      g = '0x' + hex[2] + hex[2];\r\n      b = '0x' + hex[3] + hex[3];\r\n    }\r\n\r\n    if(hex.length === 7) {\r\n      r = '0x' + hex[1] + hex[2];\r\n      g = '0x' + hex[3] + hex[4];\r\n      b = '0x' + hex[5] + hex[6];\r\n    }\r\n\r\n    rgb = `${parseInt(r, 16)}, ${parseInt(g, 16)}, ${parseInt(b, 16)}`;\r\n\r\n    return rgb;\r\n  }\r\n\r\n  function clipboard(colour) {\r\n    navigator.clipboard.writeText(`${colour}`);\r\n  }\r\n\r\n  var coloursDiv = colour.map((colourObj, i) => {\r\n    return (\r\n    <div\r\n      className='colour-column'\r\n      style={{backgroundColor: `${colourObj.colour}`}}\r\n      key={colourObj.pos}\r\n    >\r\n\r\n      <button \r\n        className='colour-column-item clickable btn-delete' \r\n        onClick={() => removeColour(colourObj.pos)} \r\n      >\r\n        X\r\n      </button>\r\n\r\n      <input \r\n        className='colour-column-item clickable colour-column-item-input' \r\n        type=\"color\" value={colourObj.colour} \r\n        onChange={(e) => {handleChangeColour(e, colourObj.pos)}} \r\n      />\r\n\r\n      <p \r\n        className='colour-column-item clickable' \r\n        onClick={() => clipboard(colourObj.colour)} \r\n      >\r\n        {colourObj.colour.toUpperCase()}\r\n      </p>\r\n\r\n      <p \r\n        className='colour-column-item clickable' \r\n        onClick={() => clipboard(hexToRGB(colourObj.colour))} \r\n      >\r\n        {hexToRGB(colourObj.colour)}\r\n      </p>\r\n\r\n    </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className='colours'>\r\n      {coloursDiv}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Colours\r\n","import './App.css';\nimport { useState } from 'react';\nimport Colours from './components/Colours';\n\nfunction App() {\n\n\n  const [coloursArray, setColourArray] = useState(() => makeColoursArray());\n\n  function makeColoursArray() {\n    return [makeColourObject(0)];\n  }\n\n  function addNewColourToColoursArray() {\n    var coloursArrayCopy = coloursArray.slice();\n\n    if(coloursArrayCopy.length >= 8) {\n      return;\n    }\n\n    var newColour = makeColourObject(coloursArrayCopy.length);\n\n    coloursArrayCopy.push(newColour);\n\n    setColourArray(coloursArrayCopy);\n\n  }\n\n  function makeColourObject(pos) {\n    var newColour = {\n      colour: randomColourInHex(),\n      pos: pos\n    };\n    return newColour;\n  }\n\n  function randomColourInHex() {\n    var newColour = '#';\n    const colourHex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n    \n    for(var i = 0; i < 6; i++) {\n      var num = Math.floor(Math.random() * colourHex.length);\n      newColour += colourHex[num]\n    }\n    return newColour;\n  }\n\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Colour Palette Picker</h1>\n        <button onClick={() => addNewColourToColoursArray()} >new colour</button>\n\n        <div className=\"creds-div\">\n          <p className=\"cred\">Made by Derek Price</p>\n          <a className=\"cred\" href=\"https://github.com/DerekPixel/colour-palette-picker\">GitHub</a>\n        </div>\n      </header>\n      <Colours colour={coloursArray} setColour={(coloursObject) => {setColourArray(coloursObject)}} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}