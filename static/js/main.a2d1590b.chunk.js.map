{"version":3,"sources":["components/ColourValueText.jsx","components/Colours.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ColourValueText","className","colour","defaultText","colourTooltip","useRef","changeText","ref","text","current","textContent","onMouseOut","onClick","navigator","clipboard","writeText","toUpperCase","Colours","setColourArray","setColour","HexToRGB","r","g","b","hex","String","length","parseInt","RGBToHex","rgb","arr","split","toString","RGBToHSL","cmin","Math","min","cmax","max","delta","h","s","l","round","abs","toFixed","HSLToRGB","hsl","hslArray","c","x","m","getLightnessFromHex","makeColourLighter","colour1","makeColourDarker","handleAddingNewColourBesideCurrent","thisPos","otherPos","coloursArrayCopy","slice","newAverageColour","colour2","rgb1","rgb2","averageColours","newColour","pos","splice","i","coloursDiv","map","colourObj","style","backgroundColor","color","removeColour","type","value","onChange","e","target","handleChangeColour","App","useState","makeColourObject","coloursArray","randomColourInHex","colourHex","floor","random","href","coloursObject","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2d1590b.chunk.js","sourcesContent":["import { useRef } from 'react';\r\n\r\nconst ColourValueText = ({className, colour, defaultText}) => {\r\n\r\n  const colourTooltip = useRef(null);\r\n\r\n  function clipboard(colour) {\r\n    navigator.clipboard.writeText(colour);\r\n  }\r\n\r\n  function changeText(ref, text) {\r\n    ref.current.textContent = text;\r\n  }\r\n\r\n  return (\r\n    <p\r\n      className={className}\r\n      onMouseOut={() => {\r\n        changeText(colourTooltip, defaultText);\r\n      }}\r\n      onClick={() => {\r\n        clipboard(colour);\r\n        changeText(colourTooltip, `COPIED: ${colour}`);\r\n      }}\r\n    >\r\n      <span className='tooltiptext' ref={colourTooltip} >{defaultText}</span>\r\n      {colour.toUpperCase()}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default ColourValueText\r\n","import ColourValueText from './ColourValueText';\r\n\r\nconst Colours = ({colour, setColour: setColourArray}) => {\r\n\r\n  function handleChangeColour(e, pos) {\r\n    var coloursArrayCopy = colour.slice();\r\n\r\n    coloursArrayCopy[pos].colour = e.target.value;\r\n    \r\n    setColourArray(coloursArrayCopy);\r\n  }\r\n\r\n  function removeColour(pos) {\r\n    var coloursArrayCopy = colour.slice();\r\n\r\n    //escape if there is only one colour left in the colours Array\r\n    if(coloursArrayCopy.length === 1) {\r\n      return;\r\n    }\r\n\r\n    //Remove colour from array\r\n    coloursArrayCopy.splice(pos, 1);\r\n\r\n    //make sure each colour has correct position property\r\n    for(var i = 0; i < coloursArrayCopy.length; i++) {\r\n      coloursArrayCopy[i].pos = i;\r\n    }\r\n\r\n    setColourArray(coloursArrayCopy);\r\n  }\r\n  \r\n  function HexToRGB(hex = String) {\r\n\r\n    var r, g, b, rgb;\r\n    r = g = b = '00';\r\n\r\n    if(hex.length === 4) {\r\n      r = '0x' + hex[1] + hex[1];\r\n      g = '0x' + hex[2] + hex[2];\r\n      b = '0x' + hex[3] + hex[3];\r\n    }\r\n\r\n    if(hex.length === 7) {\r\n      r = '0x' + hex[1] + hex[2];\r\n      g = '0x' + hex[3] + hex[4];\r\n      b = '0x' + hex[5] + hex[6];\r\n    }\r\n\r\n    rgb = `${parseInt(r, 16)} ${parseInt(g, 16)} ${parseInt(b, 16)}`;\r\n\r\n    return rgb;\r\n  }\r\n\r\n  function RGBToHex(rgb = String) {\r\n\r\n    var arr = rgb.split(' ');\r\n\r\n    var r = parseInt(arr[0], 10),\r\n        g = parseInt(arr[1], 10),\r\n        b = parseInt(arr[2], 10);\r\n\r\n    r = r.toString(16);\r\n    g = g.toString(16);\r\n    b = b.toString(16);\r\n  \r\n    if (r.length === 1) {\r\n      r = \"0\" + r;\r\n    }\r\n    if (g.length === 1) {\r\n      g = \"0\" + g;\r\n    }\r\n    if (b.length === 1) {\r\n      b = \"0\" + b;\r\n    }\r\n  \r\n    return `#${r}${g}${b}`\r\n  }\r\n\r\n  function RGBToHSL(rgb = String) {\r\n\r\n    var arr = rgb.split(' ');\r\n    var r = arr[0];\r\n    var g = arr[1];\r\n    var b = arr[2];\r\n\r\n    // Make r, g and b fractionsof 1\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n\r\n    // Find the greatest and smallest channel values\r\n    var cmin = Math.min(r, g, b),\r\n        cmax = Math.max(r, g, b),\r\n        delta = cmax - cmin,\r\n        h = 0,\r\n        s = 0,\r\n        l = 0;\r\n\r\n    // Calculate hue\r\n    // No difference\r\n    if(delta === 0) {\r\n      h = 0;\r\n    } else if(cmax === r) {       // Red is max\r\n      h = ((g - b) / delta) % 6;\r\n    } else if(cmax === g) {       // Green is max\r\n      h = (b - r) / delta + 2;\r\n    } else {                      // Blue is max\r\n      h = (r - g) / delta + 4;\r\n    }\r\n\r\n    h = Math.round(h * 60);\r\n\r\n    // Make negative hues positive behind 360degrees\r\n    if(h < 0) {\r\n      h += 360;\r\n    }\r\n\r\n    // Calculate lightness\r\n    l = (cmax + cmin) / 2;\r\n\r\n    // Calculate saturation\r\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n\r\n    // Multiply l and s by 100\r\n    s = +(s * 100).toFixed(1);\r\n    l = +(l * 100).toFixed(1);\r\n\r\n    return `${h} ${s} ${l}`;\r\n\r\n  }\r\n\r\n  function HSLToRGB(hsl = String) {\r\n    \r\n    var hslArray = hsl.split(' ');\r\n\r\n    var h = parseInt(hslArray[0], 10),\r\n        s = parseInt(hslArray[1], 10),\r\n        l = parseInt(hslArray[2], 10);\r\n\r\n    // Must be fractions of 1\r\n    s /= 100;\r\n    l /= 100;\r\n\r\n    var c = (1 - Math.abs(2 * l - 1)) * s,\r\n        x = c * (1 - Math.abs((h / 60) % 2 - 1)),\r\n        m = l - c / 2,\r\n        r = 0,\r\n        g = 0,\r\n        b = 0;\r\n\r\n    if (0 <= h && h < 60) {\r\n      r = c; g = x; b = 0;  \r\n    } else if (60 <= h && h < 120) {\r\n      r = x; g = c; b = 0;\r\n    } else if (120 <= h && h < 180) {\r\n      r = 0; g = c; b = x;\r\n    } else if (180 <= h && h < 240) {\r\n      r = 0; g = x; b = c;\r\n    } else if (240 <= h && h < 300) {\r\n      r = x; g = 0; b = c;\r\n    } else if (300 <= h && h < 360) {\r\n      r = c; g = 0; b = x;\r\n    }\r\n    r = Math.round((r + m) * 255);\r\n    g = Math.round((g + m) * 255);\r\n    b = Math.round((b + m) * 255);\r\n  \r\n    return `${r} ${g} ${b}`;\r\n\r\n  }\r\n\r\n  function getLightnessFromHex(colour) {\r\n\r\n    var hsl = RGBToHSL(HexToRGB(colour));\r\n    var arr = hsl.split(' ');\r\n\r\n    return arr[2];\r\n  }\r\n\r\n  function averageColours(colour1, colour2) {\r\n\r\n    var rgb1 = HexToRGB(colour1).split(' ');\r\n    var rgb2 = HexToRGB(colour2).split(' ');\r\n\r\n    var r = Math.round((parseInt(rgb1[0], 10) + parseInt(rgb2[0], 10)) / 2);\r\n    var g = Math.round((parseInt(rgb1[1], 10) + parseInt(rgb2[1], 10)) / 2);\r\n    var b = Math.round((parseInt(rgb1[2], 10) + parseInt(rgb2[2], 10)) / 2);\r\n\r\n    return `${r} ${g} ${b}`;\r\n  }\r\n\r\n  function makeColourLighter(colour1) {\r\n\r\n    var hsl = RGBToHSL(HexToRGB(colour1));\r\n\r\n    var arr = hsl.split(' ');\r\n\r\n    var h = parseInt(arr[0], 10);\r\n    var s = parseInt(arr[1], 10);\r\n    var l = parseInt(arr[2], 10);\r\n\r\n    if(l >= 95) {\r\n      l = 100;\r\n    } else {\r\n      l += 5;\r\n    }\r\n\r\n    return RGBToHex(HSLToRGB(`${h} ${s} ${l}`));\r\n\r\n  }\r\n\r\n  function makeColourDarker(colour1) {\r\n\r\n    var hsl = RGBToHSL(HexToRGB(colour1));\r\n\r\n    var arr = hsl.split(' ');\r\n\r\n    var h = parseInt(arr[0], 10);\r\n    var s = parseInt(arr[1], 10);\r\n    var l = parseInt(arr[2], 10);\r\n\r\n    if(l <= 5) {\r\n      l = 0;\r\n    } else {\r\n      l -= 5;\r\n    }\r\n\r\n    return RGBToHex(HSLToRGB(`${h} ${s} ${l}`));\r\n  }\r\n\r\n  function handleAddingNewColourBesideCurrent(thisPos, otherPos) {\r\n\r\n    var coloursArrayCopy = colour.slice();\r\n\r\n    if(coloursArrayCopy.length >= 7) {\r\n      return;\r\n    }\r\n\r\n    var colour1, colour2, newAverageColour;\r\n\r\n    if(otherPos < 0 || otherPos > coloursArrayCopy.length - 1) {\r\n\r\n      if(coloursArrayCopy.length === 1) {\r\n        \r\n        if(otherPos < 0) {\r\n          newAverageColour = makeColourDarker(coloursArrayCopy[thisPos].colour);\r\n        } else if(otherPos > 0) {\r\n          newAverageColour = makeColourLighter(coloursArrayCopy[thisPos].colour);\r\n        }\r\n      } else {\r\n        if(thisPos === 0) {\r\n          newAverageColour = makeColourDarker(coloursArrayCopy[thisPos].colour);\r\n        } else if(thisPos === coloursArrayCopy.length - 1) {\r\n          newAverageColour = makeColourLighter(coloursArrayCopy[thisPos].colour);\r\n        }\r\n      }\r\n      \r\n    } else {\r\n      colour1 = coloursArrayCopy[thisPos].colour;\r\n      colour2 = coloursArrayCopy[otherPos].colour;\r\n\r\n      newAverageColour = RGBToHex(averageColours(colour1, colour2));\r\n    }\r\n\r\n    var newColour = {\r\n      colour: newAverageColour,\r\n      pos: 0\r\n    }\r\n\r\n    if(thisPos > otherPos) {\r\n      coloursArrayCopy.splice(thisPos, 0, newColour);\r\n    } else {\r\n      coloursArrayCopy.splice(otherPos, 0, newColour);\r\n    }\r\n\r\n    //make sure each colour has correct position property\r\n    for(var i = 0; i < coloursArrayCopy.length; i++) {\r\n      coloursArrayCopy[i].pos = i;\r\n    }\r\n\r\n    setColourArray(coloursArrayCopy);\r\n\r\n  }\r\n\r\n  var coloursDiv = colour.map((colourObj, i) => {\r\n    \r\n\r\n    return (\r\n    <div\r\n      className='colour-column'\r\n      style={{\r\n        backgroundColor: `${colourObj.colour}`,\r\n        color: getLightnessFromHex(colourObj.colour) > 50 ? 'black' : 'white'\r\n      }}\r\n      key={colourObj.pos}\r\n    >\r\n\r\n      <button onClick={() => handleAddingNewColourBesideCurrent(colourObj.pos, colourObj.pos - 1)} >+</button>\r\n\r\n      <div className='colour-column-inner' >\r\n        <button\r\n          className='\r\n            colour-column-item\r\n            clickable\r\n            btn-delete\r\n          '\r\n          onClick={() => removeColour(colourObj.pos)}\r\n          style={{color: getLightnessFromHex(colourObj.colour) > 50 ? 'black' : 'white'}}\r\n        >\r\n          X\r\n        </button>\r\n        <input\r\n          className='\r\n            colour-column-item\r\n            clickable\r\n            colour-column-item-input\r\n          '\r\n          type=\"color\" value={colourObj.colour}\r\n          onChange={(e) => {handleChangeColour(e, colourObj.pos)}}\r\n        />\r\n        <ColourValueText\r\n          className='\r\n            colour-column-item\r\n            clickable\r\n            tooltip\r\n            hex-text\r\n          '\r\n          colour={colourObj.colour}\r\n          defaultText='COPY HEX'\r\n        />\r\n        < ColourValueText\r\n          className='\r\n            colour-column-item\r\n            clickable\r\n            tooltip\r\n            rgb-text\r\n          '\r\n          colour={HexToRGB(colourObj.colour)}\r\n          defaultText='COPY RGB'\r\n        />\r\n      </div>\r\n\r\n      <button onClick={() => handleAddingNewColourBesideCurrent(colourObj.pos, colourObj.pos + 1)} >+</button>\r\n\r\n    </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className='colours'>\r\n      {coloursDiv}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Colours\r\n","import './App.css';\nimport { useState } from 'react';\nimport Colours from './components/Colours';\n\nfunction App() {\n\n  const [coloursArray, setColourArray] = useState(() => makeColoursArray());\n\n  function makeColoursArray() {\n    return [makeColourObject(0)];\n  }\n\n  function makeColourObject(pos) {\n    var newColour = {\n      colour: randomColourInHex(),\n      pos: pos\n    };\n    return newColour;\n  }\n\n  function randomColourInHex() {\n    var newColour = '#';\n    const colourHex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n    \n    for(var i = 0; i < 6; i++) {\n      newColour += colourHex[Math.floor(Math.random() * colourHex.length)];\n    }\n    return newColour;\n  }\n\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Colour Palette Picker</h1>\n\n        <div className=\"creds-div\">\n          <p className=\"cred\">Made by Derek Price</p>\n          <a className=\"cred\" href=\"https://github.com/DerekPixel/colour-palette-picker\">GitHub</a>\n        </div>\n      </header>\n      <Colours colour={coloursArray} setColour={(coloursObject) => {setColourArray(coloursObject)}} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}